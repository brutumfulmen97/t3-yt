generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EngagementType {
    LIKE
    DISLIKE
    VIEW
    SAVE
    FOLLOW
}

model User {
    id                    String                  @id @default(cuid())
    name                  String?
    email                 String?                 @unique
    emailVerified         DateTime?
    image                 String?
    backgroundImage       String?                 @db.Text
    handle                String?                 @unique
    videos                Video[]
    accounts              Account[]
    sessions              Session[]
    VideoEngagement       VideoEngagement[]
    Comment               Comment[]
    Annoucement           Annoucement[]
    AnnoucementEngagement AnnoucementEngagement[]
    followers             FollowEngagement[]      @relation("Followings")
    followings            FollowEngagement[]      @relation("Followers")
    Playlist              Playlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Video {
    id                String              @id @default(cuid())
    title             String?             @db.Text
    thumbnailUrl      String?             @db.Text
    description       String?             @db.Text
    videoUrl          String              @db.Text
    publish           Boolean             @default(true)
    userId            String
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    VideoEngagement   VideoEngagement[]
    Comment           Comment[]
    PlaylistHasVideos PlaylistHasVideos[]

    @@index([userId])
}

model VideoEngagement {
    id             String         @id @default(cuid())
    userId         String?
    videoId        String?
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    video          Video?         @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([videoId])
}

model Comment {
    id        String   @id @default(cuid())
    message   String?  @db.Text
    videoId   String?
    userId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([videoId])
}

model Annoucement {
    id                    String                  @id @default(cuid())
    message               String?                 @db.Text
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    userId                String
    user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    AnnoucementEngagement AnnoucementEngagement[]

    @@index([userId])
}

model FollowEngagement {
    followerId     String
    followingId    String
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    follower       User           @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
    following      User           @relation("Followings", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model AnnoucementEngagement {
    userId         String
    annoucementId  String
    engagementType EngagementType
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    annoucement    Annoucement    @relation(fields: [annoucementId], references: [id], onDelete: Cascade)

    @@id([userId, annoucementId])
    @@index([userId])
    @@index([annoucementId])
}

model Playlist {
    id                String              @id @default(cuid())
    title             String              @db.Text
    description       String              @db.Text
    userId            String
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    PlaylistHasVideos PlaylistHasVideos[]

    @@index([userId])
}

model PlaylistHasVideos {
    id         String   @id @default(cuid())
    playlistId String
    videoId    String
    playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([playlistId, videoId])
    @@index([playlistId])
    @@index([videoId])
}
